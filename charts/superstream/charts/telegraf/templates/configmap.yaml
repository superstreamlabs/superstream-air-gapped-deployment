apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "telegraf.fullname" . }}
  labels:
    {{- include "telegraf.labels" . | nindent 4 }}
data:
  telegraf.conf: |
    [agent]
      collection_jitter = "0s"
      debug = false
      flush_interval = "10s"
      flush_jitter = "0s"
      hostname = "$HOSTNAME"
      interval = "10s"
      logfile = "/tmp/telegraf.log"
      logfile_rotation_max_archives = 5
      logfile_rotation_max_size = "10MB"
      metric_batch_size = 1000
      metric_buffer_limit = 10000
      omit_hostname = false
      precision = ""
      quiet = false
      round_interval = true
    [[processors.enum]]
      [[processors.enum.mapping]]
        dest = "status_code"
        field = "status"
        [processors.enum.mapping.value_mappings]
            critical = 3
            healthy = 1
            problem = 2
    [[processors.starlark]]
      namepass = [
        "syslog"
      ]
      source = "def apply(metric):\n    unique_str = metric.name + str(metric.fields) + str(metric.tags)\n    random_value = str(hash(unique_str))[-8:]\n    metric.tags['eventId'] = random_value\n    return metric                                         \n"
    [[processors.starlark]]
      source = '''
    def apply(metric):
        level = metric.fields.get('level')
        if level == "I":
            metric.fields['level'] = "info"
        elif level == "W":
            metric.fields['level'] = "warning"
        elif level == "E":
            metric.fields['level'] = "error"
        return metric
      '''
    [[processors.starlark]]
      namepass = [
        "syslog"
      ]    
      source = '''
    def apply(metric):
        severity = metric.tags.get('severity')
        if severity == "err":
            metric.tags['level'] = "error" 
        elif severity == "warning":
            metric.tags['level'] = "warning"            
        elif severity == "notice":
            metric.tags['level'] = "info"
        return metric
      '''      
    [[outputs.loki]]
      domain = "https://loki.mgmt.superstream.ai"
      endpoint = "/loki/api/v1/push"
      namepass = [
        "syslog",
        "telegraf_logs"
      ]
      fielddrop = [
        "SDID@0_eventSource",
        "facility_code",
        "severity_code",
        "version",
        "timestamp",
        "procid"
      ]
      [outputs.loki.http_headers]
        Authorization = "$TOKEN"
    [[outputs.http]]
      data_format = "prometheusremotewrite"
      method = "POST"
      namedrop = [
        "syslog",
        "telegraf_logs",
        "internal"
      ]
      url = "https://prometheus.mgmt.superstream.ai/api/v1/write"
      [outputs.http.headers]
        Authorization = "$TOKEN"    
    [[inputs.syslog]]
      server = "udp://:6514"
      [inputs.syslog.tags]
        accountId = "{{ .Values.global.superstreamAccountId }}"
        engineName = {{ .Values.global.engineName | quote }}
    [[inputs.prometheus]]
      kubernetes_label_selector = "app.kubernetes.io/name in (nats, superstream)"
      monitor_kubernetes_pods = true
      monitor_kubernetes_pods_method = "settings+annotations"
      monitor_kubernetes_pods_namespace = {{ .Release.Namespace | quote}}
      monitor_kubernetes_pods_port = 7777
      [inputs.prometheus.tags]
        accountId = "{{ .Values.global.superstreamAccountId }}"
        engineName = {{ .Values.global.engineName | quote }}

    [[inputs.tail]]
      files = ["/tmp/telegraf.log"]
      from_beginning = false
      name_override = "telegraf_logs"
      data_format = "grok"
      grok_custom_patterns = '''
    LOGLEVEL [IWE]
    COMPONENT \[(.*?)\]
      '''
      grok_patterns = [
        "%{TIMESTAMP_ISO8601:timestamp} %{LOGLEVEL:level}! %{COMPONENT:component} %{GREEDYDATA:message}",
      ]
      [inputs.tail.tags]
        accountId = "{{ .Values.global.superstreamAccountId }}"
        engineName = {{ .Values.global.engineName | quote }}
        appname = "telegraf"

    [[inputs.internal]]
      collect_memstats = true
      [inputs.internal.tags]
        accountId = "{{ .Values.global.superstreamAccountId }}"
        engineName = {{ .Values.global.engineName | quote }}
