############################################################
# GLOBAL configuration for Superstream Engine
############################################################
global:
  engineName: "airgapped" # Define the superstream engine name within 32 characters, excluding '.', and using only lowercase letters, numbers, '-', and '_'.
  superstreamAccountId: "223671996" # Provide the account ID associated with the deployment, which could be used for identifying resources or configurations tied to a specific account.
  superstreamActivationToken: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhY2NvdW50X2luZm8iOnsiYWNjb3VudF9pZCI6IjIyMzY3MTk5NiIsImVtYWlsIjoiYmVrYUBtZW1waGlzLmRldiIsImp3dCI6ImV5SjBlWEFpT2lKS1YxUWlMQ0poYkdjaU9pSmxaREkxTlRFNUxXNXJaWGtpZlEuZXlKcWRHa2lPaUpJV2tGRVNGRkpVRVpZTjA5TlFWWlNTVmxFUzFwUFRVeE1TMFpQU0ZOWE5VZENWek0zVkVSVlEwbE5SVUZDUjBaR1dFSlJJaXdpYVdGMElqb3hOekV3TkRFMU9Ua3dMQ0pwYzNNaU9pSkJRMVpSUjBwSVZGVlJSRXcwUmpaQ1VETlVWVXRHTjB3MVVrbFVORlZLV2s1R1RsZElWVUpXUVVGUFZrTTNWRUZMU1ZSWU1sQlpNeUlzSW01aGJXVWlPaUl5TWpNMk56RTVPVFlpTENKemRXSWlPaUpWUTBRMlNWUTJSREpYV1VkV1VWQkhVbEJWVlVkVFRFZzNNazQwV0ZSVFVVUkJVRFZUVWtKR1VGbEhSVmhGVmpaVU16TlFOVlJCTnlJc0ltNWhkSE1pT25zaWNIVmlJanA3ZlN3aWMzVmlJanA3ZlN3aWMzVmljeUk2TFRFc0ltUmhkR0VpT2kweExDSndZWGxzYjJGa0lqb3RNU3dpZEhsd1pTSTZJblZ6WlhJaUxDSjJaWEp6YVc5dUlqb3lmWDAua1ZmMy1vb2V5dGVKSlZXdDFGWjhTUTBTYVVrZ3o1V25wdXRTSk1BaG5LNEV2NWhEUVhvY3Etd2VEdDY3dEk3V0xWNHoxVlRuVV91dUE3bTY2dUhhREEiLCJua2V5IjoiU1VBTk5YUTRJNktJWExWQkQ0WFQzS1hPM0dCQlA0WEczS1pST09KRVNYWE9GVU00N0VDWU1SNDZRWSIsIm9yZ2FuaXphdGlvbl9uYW1lIjoiYmVrYSJ9fQ.Ij-foKNzAKSQ4eRF98gFpF0mlNanjjDmjn_n94Bvhas" # Enter the activation token required for services or resources that need an initial token for activation or authentication.
  skipLocalAuthentication: true
  onPrem: true
  
  image:
    # global image pull policy to use for all container images in the chart
    # can be overridden by individual image pullPolicy
    pullPolicy:
    # global list of secret names to use as image pull secrets for all pod specs in the chart
    # secrets must exist in the same namespace
    # https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
    pullSecretNames:
      - regcred
    # global registry to use for all container images in the chart
    # can be overridden by individual image registry
    registry:

  # global labels will be applied to all resources deployed by the chart
  labels: {}
  
############################################################
# NATS config
############################################################
# NATS HA Deployment. Default "true"
nats:
  config:
    cluster:
      enabled: true
      # NATS storageClass configuration. Default blank "".
    jetstream:
      fileStore:
        pvc:
          storageClassName: ""

############################################################
# Superstream Control Plane config
############################################################
superstreamControlPlane:
  # Number of replicas for the control plane deployment
  replicaCount: 2
  image:
    # Docker image repository for the backend service
    repository: superstreamlabs/superstream-control-plane-be
    # Policy for pulling the image
    pullPolicy: Always
    # Overrides the image tag whose default is the chart appVersion.
    tag: "1.0.301"
    registry: 
  imagePullSecrets: []


  initContainers:
    # Image used for readiness checks or setup tasks before the main containers start
    image: curlimages/curl:8.6.0
  secret:
    name: superstream-creds-control-plane
    encryptionSecretKey: ""
    superstreamActivationToken: ""
    useExisting: true


  # Superstream Control Plane UI config
  userInterface:
      # Number of replicas for the control plane UI deployment
    replicaCount: 1
    image:
      # Docker image repository for the UI service
      repository: superstreamlabs/superstream-control-plane-ui-test
      # Policy for pulling the image
      pullPolicy: Always
      # Overrides the image tag whose default is the chart appVersion.
      tag: "staging"
      registry: 
    imagePullSecrets: []


    initContainers:
      # Image used for readiness checks or setup tasks before the main containers start
      image: curlimages/curl:8.6.0
    service:
      enabled: true
      type: ClusterIP
      port: 8080



############################################################
# Superstream Engine config
############################################################
superstreamEngine:
  releaseDate: ""
  # Number of replicas for the backend deployment
  replicaCount: 2
  image:
    # Docker image repository for the backend service
    repository: superstreamlabs/superstream-data-plane-be
    # Policy for pulling the image
    pullPolicy: Always
    # Overrides the image tag whose default is the chart appVersion.
    tag: "latest"
    registry: 
  imagePullSecrets: []
  # Overrides for Helm's default naming conventions
  nameOverride: ""
  fullnameOverride: "superstream"
  # ConfigMap settings for mounting or referencing within the deployment   
  # Init container configuration
  initContainers:
    # Image used for readiness checks or setup tasks before the main containers start
    image: curlimages/curl:8.6.0
  configMap:
    enable: ""
    # Option to use an existing ConfigMap instead of creating a new one
    useExisting: false
    # Name of the existing ConfigMap to use if `useExisting` is true
    existingConfigMapName: my-existing-configmap
    # Name used when creating a new ConfigMap
    name: ""
    fileData:
      # Path where the ConfigMap will be mounted in the pod
      mountPath: /etc/superstream-conf/
      # Example: Uncomment to enable file data
      fileName: ""
      fileContent: ""
  #    # Example file content  
  # Secret configuration for handling sensitive information
  secret:
    name: superstream-creds
    encryptionSecretKey: ""
    superstreamActivationToken: ""
    useExisting: false
  podAnnotations:
    prometheus.io/path: "/monitoring/metrics"
    prometheus.io/scrape: 'true'
    prometheus.io/port: "7777"
  podSecurityContext: {}
  # fsGroup: 2000

  securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000
  serviceAccount:
    # Specifies whether a service account should be created
    create: true
    # Annotations to add to the service account
    annotations: {}
    # The name of the service account to use.
    # If not set and create is true, a name is generated using the fullname template
    name: ""
  service:
    enabled: true
    type: ClusterIP
    port: 7777
  ingress:
    enabled: false
    className: ""
    annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
    hosts:
      - host: chart-example.local
        paths:
          - path: /
            pathType: ImplementationSpecific
    tls: []
    #  - secretName: chart-example-tls
    #    hosts:
    #      - chart-example.local
  resources:
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    limits:
      cpu: '8'
      memory: 8Gi
    requests:
      cpu: '50m'
      memory: 50Mi
  # Autoscaling configuration for dynamically adjusting the number of pod replicas
  autoscaling:
    enabled: true
    minReplicas: 2
    maxReplicas: 5
    targetCPUUtilizationPercentage: 75
    targetMemoryUtilizationPercentage: 75
  nodeSelector: {}
  tolerations: []
  affinity: {}
  internalNatsConnection:
    host: ""
    port: 4222
  controlPlane:
    host: "broker.superstream.ai"
    port: 4222
  syslog:
    enabled: true
    remoteSyslog: superstream-syslog
    port: 5514
    protocol: udp

syslog:
  replicaCount: 1
  image:
    repository: linuxserver/syslog-ng
    pullPolicy: IfNotPresent
    tag: "4.7.1" # Use a specific version to ensure consistency across deployments
    registry: 
  imagePullSecrets: []
  service:
    type: ClusterIP
    port: 5514
    protocol: UDP
  resources:
    limits:
      memory: 256Mi
    requests:
      cpu: 50m
  podAnnotations:
    prometheus.io/scrape: 'false'
  remoteSyslog:
    destinationHost: telegraf
    port: 6514
    protocol: udp
  configMap:
    enabled: true
    name: syslog-config
    mountPath: /tmp/syslog-ng.conf
    subPath: syslog-ng.conf # Optional, use if you want to mount a specific file from the ConfigMap
  # Persistent Volume configuration, if needed
  persistence:
    enabled: false
    size: "1Gi"
    accessModes:
      - ReadWriteOnce
    storageClassName: ""
  nodeSelector: {}
  tolerations: []
  affinity: {}

############################################################
# Superstream Telegraf config
############################################################  
## If your environment uses a proxy server, uncomment the lines below and replace the URL with your proxy server's address.
# telegraf:
#   env:
#   - name: HTTPS_PROXY
#     value: "http://your-proxy-server"
#   - name: HOSTNAME
#     value: "telegraf-polling-service"
#   - name: TOKEN
#     valueFrom:
#       secretKeyRef:
#         name: superstream-creds
#         key: ACTIVATION_TOKEN 
